コマンドの基本
{
書き方(全コマンド共通)
コマンド オプション
のルールで書く、コマンドにオプションを指定して、動作を指示する(オプションは2つ以上指定する事も出来る)
操作命令を全てテキストで管理するため、再実行、再現実行がしやすい

各コマンドは /usr/bin の各処理をコマンド命令によって実行している=コマンドによる処理もプログラムを実行しているだけであるため、コマンドを自作する事も可能である
}

ファイルパスは、ファイルそのものをドロップすれば自動入力される

パイプ | //
| オプションに入れる情報として、計算結果を右のコマンドに渡す
例)grep php Desktop/memo.txt | wc -l//grepの結果をwcにわたして実行する、勝手にwcの引数としていい感じに使ってくれる

リダイレクト > //
コマンドの実行結果をファイル等に保存する(保存箇所はカレントディレクトリ)既に同名ファイルが存在した場合、上書きする(前のデータは消える、fopenのwモードの挙動)
例)grep php Desktop/memo.txt > result.txt

リダイレクト　>> //
コマンドの実行結果をファイル等に保存する(保存箇所はカレントディレクトリ)既に同名ファイルが存在した場合、追記する(前のデータの下に書き足す、fopenのaモードの挙動)
例)grep php Desktop/memo.txt >> result.txt

リダイレクト < //
コマンドに対してファイルを送る(ファイルの内容をコマンドに渡す)
例)grep php < memo.txt

リダイレクトは同時に利用する事も可能
例)grep php < memo.txt > log.txt //grepにmemo.txtを渡して、その結果をlog.txtに保存する

矢印上キーで直前の命令をペースト出来る
途中までパスを入れると、Tabキーで補間が出来る

ls//現在のディレクトリにいるファイル(フォルダ)の一覧を表示する
{
ls フォルダ名//特定フォルダの中身を見る(現在階層のフォルダのみ指定可能)
ls / //ルートを見る
ls -l//詳細情報(誰にどんな情報を許可するか、パーミッション)(所有者情報)(作成日)(フォルダ、ファイル名)を見る事が出来る

ls -lの左から
-はファイルdはディレクトリ
rwxは左から所有者、グループ、その他それぞれのアクセス権
rは読み込み、wは書き込み,xはプログラムとして実行できるか
chmod//アクセス権の変更
chmod o+w ファイル名//その他に書き込み権を与える
chmod o-w ファイル名//その他に書き込み権を削除
}
man//指定コマンドの詳細情報を表示する()
{
man コマンド名//指定したコマンドの情報が出る(使えるオプション一覧が出る)
*)qキーで終了
}
cat//指定ファイルの中身を見たり、受け渡しや結合をする事が出来る(連結)
{
cat ファイルパス//指定ファイルの中身を見る(バイナリも見る事が出来るが、文字化けしてしまう)
複数のファイルを指定する事が可能(オプションに指定した順に並べる)
cat ファイルパス1 ファイルパス2 ファイルパス3 ...//分割したファイルを結合する、リダイレクトを使う事で元のファイルに戻す事も可能
例) cat out.aa out.ab out.ac > result.jpg //result.jpg
cat ファイルパスの拡張子前まで.* //ワイルドカードを利用して、先頭が入力文字列のファイル全てを結合対象にする
例) cat out.* > result.jpg
}
cd 移動したいフォルダ名//ディレクトリの移動
{
cd ..//一つ上の階層に移動する(..は一つ上を指す、.が自分自身を表す)
cd ~//最初のディレクトリ(ホームディレクトリ、~がそれを表す)に移動
cd / //一番上(ルートディレクトリ)を表す(/がルートを表す)
}
cal//カレンダーを表示する
{
cal 年数//その年のカレンダー一覧を表示する
}
sudo//管理者
{
パスワードを要求されたらマシンのパスワードを入力する(入力しても画面上には表示されない)

Active: inactive (dead)//webサーバーが動いてない
Active: active (running)//webサーバーが動いてる

sudo systemctl status httpd.service//webサーバーが起動してるか確認するために、状態を表示させる(httpd.serviceの現在のステータスを表示させる)
sudo systemctl start httpd.service//webサーバの起動
sudo systemctl stop httpd.service//webサーバの停止
}

top//現在動いているプログラムを確認する(タスクマネージャー的な役割)
{
*)qキーで終了出来る
}

ps
{
ps aux//今実行されているプログラム(プロセス)全てを表示する

}

mkdir//ディレクトリの作成
{
mkdir ディレクトリ名//その名前のディレクトリを作る
}
cp//ファイルのコピー
{
 cp -r//ディレクトリを指定できる 

}
rm//ファイルの削除
{
 rm -r//ディレクトリを指定できる
}
mv//ファイルの移動(リネームも可能)
{
}
grep//ファイルの中身を検索する(grepでは、大文字と小文字が区別される)
{
grep 検索パターン ファイル名//ファイルの中からパターンに該当する行を表示する(複数種類ファイルを検索する事も可能)

例)grep php Desktop/memo.txt //memo.txtの中のphpと言う文字列が含まれている行を取ってくる
}
wc
{
wc -l ファイル名//ファイルの行数を調べる
}
sort//並べ替え
{
sort ファイル名//先頭要素を基準に並べ替えを行う(昇順)
sort -r//降順で並べ替え
}
cut//特定要素のみ抜き出す
{
cut -f 行数 ファイル名//特定の行(区切り)のみを抜き出す(行数は複数選択できる、する場合は,で区切る、この行指定の順番には依らずに本来の文章の順番で表示される)
}
uniq//連続している同一データをまとめる(sortしてから使うと良)
{
uniq -c//まとめた各要素毎に何件あったかを表示する
}

set//文字列の置き換えをする
{
}

pwd//カレントディレクトリのフルパス(絶対パス)を表示する
{
}
split//ファイルの分割を行う
{
 split -b 分割容量 ファイルパス 出力名
 例)split -b 300k Desktop/earth.jpg out. //earth.jpgを300kbyte毎に分割、分割結果は連番で出力される
}
php//phpファイルを実行する
{
 php ファイル名//指定ファイルを実行
 php --version//現在のphpバージョンを調べる
 php -r php関数//phpの処理をコマンドから実行できる
}
mysql{
mysql --version//バージョン情報を表示、サーバーバージョンが右、クライアントバージョンが左

mysql -u root -p //ここでのrootはLinuxのrootではなく、mySQL側のユーザー名のrootである(MySQLには独自のユーザー管理が存在する、サービス毎にユーザーを作成するのが一般的、ユーザーにパスワードが設定されている場合は、-pでパスワードを入力してあげる必要がある)

mysql -u root -p < sqlファイル名.sql//.sqlファイルを読み込む
}

traceroute ドメイン名//自身のネットワークから、どのルータを経由しているかを検出できる
